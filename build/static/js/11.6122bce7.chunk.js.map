{"version":3,"sources":["API/CartAPI.jsx","Authentication/SignIn.jsx"],"names":["CartAPI","localStorage","getItem","getCarts","query","url","axiosClient","get","postAddToCart","data","post","JSON","stringify","deleteToCart","delete","putToCart","put","SignIn","props","listCart","useSelector","state","Cart","useState","email","setEmail","password","setPassword","errorEmail","setErrorEmail","emailRegex","setEmailRegex","errorPassword","setErrorPassword","redirect","setRedirect","checkPush","setCheckPush","dispatch","useDispatch","useEffect","a","i","length","params","idUser","idProduct","count","queryString","response","console","log","fetchData","className","type","placeholder","value","onChange","e","target","to","onClick","test","String","toLowerCase","validateEmail","UserAPI","postLogin","setItem","user","_id","fullname","accessToken","action","addSession"],"mappings":"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","file":"static/js/11.6122bce7.chunk.js","sourcesContent":["import axiosClient from './axiosClient';\n\nconst headers = {\n  'authorization': 'Bearer ' + localStorage.getItem('token')\n}\n\nconst CartAPI = {\n\tgetCarts: (query) => {\n\t\tconst url = `/carts${query}`;\n\t\treturn axiosClient.get(url);\n\t},\n\n\tpostAddToCart: (data) => {\n\t\tconst url = `/add-to-cart/`;\n\t\treturn axiosClient.post(url, JSON.stringify(data));\n\t},\n\n\tdeleteToCart: (query) => {\n\t\tconst url = `/carts/delete${query}`;\n\t\treturn axiosClient.delete(url);\n\t},\n\n\tputToCart: (query) => {\n\t\tconst url = `/carts/update${query}`;\n\t\treturn axiosClient.put(url);\n\t},\n};\n\nexport default CartAPI;\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link, Redirect } from 'react-router-dom';\nimport UserAPI from '../API/UserAPI';\nimport { addSession } from '../Redux/Action/ActionSession';\nimport './Auth.css';\nimport queryString from 'query-string';\nimport CartAPI from '../API/CartAPI';\n\nfunction SignIn(props) {\n\t//listCart được lấy từ redux\n\tconst listCart = useSelector((state) => state.Cart.listCart);\n\n\tconst [email, setEmail] = useState('');\n\n\tconst [password, setPassword] = useState('');\n\n\tconst [user, setUser] = useState([]);\n\n\tconst [errorEmail, setErrorEmail] = useState(false);\n\tconst [emailRegex, setEmailRegex] = useState(false);\n\tconst [errorPassword, setErrorPassword] = useState(false);\n\n\tconst [redirect, setRedirect] = useState(false);\n\n\tconst [checkPush, setCheckPush] = useState(false);\n\n\tconst dispatch = useDispatch();\n\n\t// useEffect(() => {\n\t// \tconst fetchData = async () => {\n  //     const response = await UserAPI.getAllData();\n      \n\t// \t\tsetUser(response);\n\t// \t};\n\n\t// \tfetchData();\n\t// }, []);\n\n\tconst onChangeEmail = (e) => {\n\t\tsetEmail(e.target.value);\n\t};\n\n\tconst onChangePassword = (e) => {\n\t\tsetPassword(e.target.value);\n\t};\n\n\tconst onSubmit = () => {\n\t\tif (!email) {\n\t\t\tsetErrorEmail(true);\n\t\t\treturn;\n\t\t} else {\n\t\t\tif (!password) {\n\t\t\t\tsetErrorEmail(false);\n\t\t\t\tsetErrorPassword(true);\n\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tsetErrorPassword(false);\n\n\t\t\t\tif (!validateEmail(email)) {\n\t\t\t\t\tsetEmailRegex(true);\n\t\t\t\t\treturn;\n\t\t\t\t} else {\n          setEmailRegex(false);\n          \n          const postLogin = async () => {\n            const data = {\n              email: email,\n              password: password\n            }\n\n            const response = await UserAPI.postLogin(JSON.stringify(data));\n\n            console.log(response)\n\n            setErrorPassword(false);\n\n            localStorage.setItem('id_user', response.user._id);\n\n            localStorage.setItem('name_user', response.user.fullname);\n\n            // Lưu jwt token của user\n            localStorage.setItem('token', response.accessToken);\n\n            const action = addSession(localStorage.getItem('id_user'));\n            dispatch(action);\n\n            setCheckPush(true);\n          }\n\n          postLogin();\n\n\t\t\t\t\t// const findUser = user.find((value) => {\n\t\t\t\t\t// \treturn value.email === email;\n\t\t\t\t\t// });\n\n\t\t\t\t\t// if (!findUser) {\n\t\t\t\t\t// \tsetErrorEmail(true);\n\t\t\t\t\t// \treturn;\n\t\t\t\t\t// } else {\n\t\t\t\t\t// \tsetErrorEmail(false);\n\n\t\t\t\t\t// \tif (findUser.password !== password) {\n\t\t\t\t\t// \t\tsetErrorPassword(true);\n\t\t\t\t\t// \t\treturn;\n\t\t\t\t\t// \t} else {\n\t\t\t\t\t// \t\tsetErrorPassword(false);\n\n\t\t\t\t\t// \t\tlocalStorage.setItem('id_user', findUser._id);\n\n\t\t\t\t\t// \t\tlocalStorage.setItem('name_user', findUser.fullname);\n\n\t\t\t\t\t// \t\tconst action = addSession(localStorage.getItem('id_user'));\n\t\t\t\t\t// \t\tdispatch(action);\n\n\t\t\t\t\t// \t\tsetCheckPush(true);\n\t\t\t\t\t// \t}\n\t\t\t\t\t// }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\t//Hàm này dùng để đưa hết tất cả carts vào API của user\n\tuseEffect(() => {\n\t\tconst fetchData = async () => {\n\t\t\t//Lần đầu sẽ không thực hiện insert được vì addCart = ''\n\t\t\tif (checkPush === true) {\n\t\t\t\tfor (let i = 0; i < listCart.length; i++) {\n\t\t\t\t\t//Nó sẽ lấy idUser và idProduct và count cần thêm để gửi lên server\n\t\t\t\t\tconst params = {\n\t\t\t\t\t\tidUser: localStorage.getItem('id_user'),\n\t\t\t\t\t\tidProduct: listCart[i].idProduct,\n\t\t\t\t\t\tcount: listCart[i].count,\n\t\t\t\t\t};\n\n\t\t\t\t\tconst query = '?' + queryString.stringify(params);\n\n\t\t\t\t\tconst response = await CartAPI.postAddToCart(query);\n\t\t\t\t\tconsole.log(response);\n\t\t\t\t}\n\n\t\t\t\tsetRedirect(true);\n\t\t\t}\n\t\t};\n\n\t\tfetchData();\n\t}, [checkPush]);\n\n\tfunction validateEmail(email) {\n\t\tconst re =\n\t\t\t/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\t\treturn re.test(String(email).toLowerCase());\n\t}\n\n\treturn (\n\t\t<div className='limiter'>\n\t\t\t<div className='container-login100'>\n\t\t\t\t<div className='wrap-login100 p-l-55 p-r-55 p-t-65 p-b-50'>\n\t\t\t\t\t<span className='login100-form-title p-b-33'>Sign In</span>\n\n\t\t\t\t\t<div className='d-flex justify-content-center pb-5'>\n\t\t\t\t\t\t{emailRegex && (\n\t\t\t\t\t\t\t<span className='text-danger'>\n\t\t\t\t\t\t\t\t* Incorrect Email Format\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{errorEmail && (\n\t\t\t\t\t\t\t<span className='text-danger'>\n\t\t\t\t\t\t\t\t* Please Check Your Email\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t{errorPassword && (\n\t\t\t\t\t\t\t<span className='text-danger'>\n\t\t\t\t\t\t\t\t* Please Check Your Password\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className='wrap-input100 validate-input'>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tclassName='input100'\n\t\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\t\tplaceholder='Email'\n\t\t\t\t\t\t\tvalue={email}\n\t\t\t\t\t\t\tonChange={onChangeEmail}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className='wrap-input100 rs1 validate-input'>\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tclassName='input100'\n\t\t\t\t\t\t\ttype='password'\n\t\t\t\t\t\t\tplaceholder='Password'\n\t\t\t\t\t\t\tvalue={password}\n\t\t\t\t\t\t\tonChange={onChangePassword}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className='container-login100-form-btn m-t-20'>\n\t\t\t\t\t\t{redirect && <Redirect to={`/`} />}\n\t\t\t\t\t\t<button className='login100-form-btn' onClick={onSubmit}>\n\t\t\t\t\t\t\tSign in\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className='text-center p-t-45 p-b-4'>\n\t\t\t\t\t\t<span className='txt1'>Create an account?</span>\n\t\t\t\t\t\t&nbsp;\n\t\t\t\t\t\t<Link to='/signup' className='txt2 hov1'>\n\t\t\t\t\t\t\tSign up\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default SignIn;\n"],"sourceRoot":""}